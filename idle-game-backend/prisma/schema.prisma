// Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户表
model User {
  id            String    @id @default(cuid())
  phone         String    @unique
  deviceId      String
  nickname      String?
  inviteCode    String?   @unique
  kycStatus     KYCStatus @default(PENDING)
  realName      String?
  idCard        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime  @default(now())
  
  wallet        Wallet?
  pets          Pet[]
  productionLogs ProductionLog[]
  energyLedgers EnergyLedger[]
  fusionAttempts FusionAttempt[]
  mineChallenges MineChallenge[]
  invitations   Invitation[] @relation("Inviter")
  invitedBy     Invitation?  @relation("Invitee")
  friends       Friendship[] @relation("User")
  friendOf      Friendship[] @relation("Friend")
  assistsReceived AssistLog[] @relation("AssistReceiver")
  assistsGiven    AssistLog[] @relation("Assister")
  tasks         UserTask[]
  
  @@map("users")
}

enum KYCStatus {
  PENDING
  VERIFIED
  REJECTED
}

// 钱包表
model Wallet {
  id                String   @id @default(cuid())
  userId            String   @unique
  gemBalance        Float    @default(0)
  shellBalance      Float    @default(0)
  energy            Int      @default(100)
  mineTicket        Int      @default(3)    // 矿票，默认3张
  lastEnergyUpdate  DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("wallets")
}

// 星宠表
model Pet {
  id          String     @id @default(cuid())
  userId      String
  rarity      PetRarity
  level       Int        @default(1)
  exp         Float      @default(0)
  bondTag     String?
  name        String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  user                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  productionLogs       ProductionLog[]
  fusionMaterialUsages FusionMaterial[]      @relation("MaterialPet")
  fusionResults        FusionAttempt[]       @relation("FusionResult")
  
  @@map("pets")
}

enum PetRarity {
  COMMON      // 普通
  RARE        // 稀有
  EPIC        // 史诗
  LEGENDARY   // 传说
  MYTHIC      // 神话
}

// 挂机产出记录表
model ProductionLog {
  id              String   @id @default(cuid())
  userId          String
  petId           String
  startTime       DateTime
  endTime         DateTime
  isOnline        Boolean  @default(true)
  gemProduced     Float
  shellProduced   Float
  energyConsumed  Int
  createdAt       DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  pet  Pet  @relation(fields: [petId], references: [id], onDelete: Cascade)
  
  @@map("production_logs")
}

// 能量流水表
model EnergyLedger {
  id         String       @id @default(cuid())
  userId     String
  amount     Int
  source     EnergySource
  target     String?      // 用途描述
  timestamp  DateTime     @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("energy_ledgers")
}

enum EnergySource {
  NATURAL_RECOVERY
  PURCHASE
  ASSIST
  TASK_REWARD
  ADMIN
}

// 融合尝试记录表
model FusionAttempt {
  id            String           @id @default(cuid())
  userId        String
  targetRarity  PetRarity
  shellCost     Float            // 贝壳手续费
  useProtection Boolean          @default(false) // 是否使用保护符
  success       Boolean
  resultPetId   String?          @unique
  timestamp     DateTime         @default(now())
  
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  materials FusionMaterial[]
  resultPet Pet?             @relation("FusionResult", fields: [resultPetId], references: [id])
  
  @@map("fusion_attempts")
}

// 融合材料明细表（中间表）
model FusionMaterial {
  id              String         @id @default(cuid())
  fusionAttemptId String
  petId           String
  petRarity       PetRarity
  petLevel        Int
  createdAt       DateTime       @default(now())
  
  fusionAttempt FusionAttempt @relation(fields: [fusionAttemptId], references: [id], onDelete: Cascade)
  pet           Pet           @relation("MaterialPet", fields: [petId], references: [id], onDelete: Cascade)
  
  @@map("fusion_materials")
}

// 矿点挑战记录表
model MineChallenge {
  id          String    @id @default(cuid())
  userId      String
  spotLevel   Int
  ticketCost  Int
  startTime   DateTime  @default(now())
  endTime     DateTime
  claimed     Boolean   @default(false)
  gemReward   Float?
  shellReward Float?
  createdAt   DateTime  @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("mine_challenges")
}

// 好友关系表
model Friendship {
  id         String            @id @default(cuid())
  userId     String
  friendId   String
  status     FriendshipStatus  @default(PENDING)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  
  user   User @relation("User", fields: [userId], references: [id], onDelete: Cascade)
  friend User @relation("Friend", fields: [friendId], references: [id], onDelete: Cascade)
  
  @@unique([userId, friendId])
  @@map("friendships")
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  BLOCKED
}

// 邀请记录表
model Invitation {
  id         String   @id @default(cuid())
  inviterId  String
  inviteeId  String   @unique
  code       String   @unique
  gemReward  Float?
  timestamp  DateTime @default(now())
  
  inviter User @relation("Inviter", fields: [inviterId], references: [id], onDelete: Cascade)
  invitee User @relation("Invitee", fields: [inviteeId], references: [id], onDelete: Cascade)
  
  @@map("invitations")
}

// 助力记录表
model AssistLog {
  id          String   @id @default(cuid())
  userId      String   // 被助力者
  assisterId  String   // 助力者
  energyGain  Int      // 获得的能量
  createdAt   DateTime @default(now())
  
  user     User @relation("AssistReceiver", fields: [userId], references: [id], onDelete: Cascade)
  assister User @relation("Assister", fields: [assisterId], references: [id], onDelete: Cascade)
  
  @@map("assist_logs")
}

// 任务配置表
model Task {
  id          String     @id @default(cuid())
  type        TaskType
  name        String
  description String
  condition   Json       // 任务条件（JSON格式）
  rewards     Json       // 奖励（JSON格式）
  resetType   ResetType?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  userTasks UserTask[]
  
  @@map("tasks")
}

enum TaskType {
  DAILY
  WEEKLY
  ACHIEVEMENT
  NEWBIE
}

enum ResetType {
  DAILY
  WEEKLY
  MONTHLY
  NEVER
}

// 用户任务进度表
model UserTask {
  id         String   @id @default(cuid())
  userId     String
  taskId     String
  progress   Int      @default(0)
  completed  Boolean  @default(false)
  claimed    Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  @@unique([userId, taskId])
  @@map("user_tasks")
}

// 交易记录表
model Transaction {
  id          String          @id @default(cuid())
  userId      String
  type        TransactionType
  amount      Float
  currency    Currency
  source      String?
  target      String?
  description String?
  timestamp   DateTime        @default(now())
  
  @@map("transactions")
}

enum TransactionType {
  EARN
  SPEND
  TRANSFER
  REFUND
}

enum Currency {
  GEM
  SHELL
}

// 商品配置表
model ShopItem {
  id            String         @id @default(cuid())
  sku           String         @unique
  name          String
  description   String?
  type          ShopItemType
  rarity        PetRarity?     // 针对星宠蛋
  price         Float
  currency      Currency
  dailyLimit    Int?           // 每日限购数量，null表示不限购
  totalStock    Int            @default(-1) // 总库存，-1表示无限
  resetType     ResetType?
  isActive      Boolean        @default(true)
  sortOrder     Int            @default(0)
  imageUrl      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  purchases     ShopPurchase[]
  
  @@map("shop_items")
}

enum ShopItemType {
  PET_EGG       // 星宠蛋
  ENERGY        // 能量
  TICKET        // 矿票
  MATERIAL      // 材料
  BOOST         // 加速道具
  PROTECTION    // 保护符
}

// 用户购买记录表
model ShopPurchase {
  id            String    @id @default(cuid())
  userId        String
  sku           String
  quantity      Int
  totalPrice    Float
  currency      Currency
  purchaseDate  DateTime  @default(now()) @db.Date // 用于日限购
  timestamp     DateTime  @default(now())
  
  shopItem      ShopItem  @relation(fields: [sku], references: [sku], onDelete: Cascade)
  
  @@index([userId, sku, purchaseDate])
  @@map("shop_purchases")
}

